package presentation.routes

import com.github.kotlintelegrambot.Bot
import com.github.kotlintelegrambot.entities.ChatId
import data.dto.payment.webhook.WebhookPaymentEventDto
import domain.Constants.DATA_PERIOD_MAX
import domain.Constants.DATA_PERIOD_MID
import domain.Constants.DATA_PERIOD_MIN
import domain.Constants.MAX_LIMIT_GB
import domain.Constants.MAX_PAYMENT_AMOUNT
import domain.Constants.MID_LIMIT_GB
import domain.Constants.MID_PAYMENT_AMOUNT
import domain.Constants.MIN_LIMIT_GB
import domain.Constants.MIN_PAYMENT_AMOUNT
import domain.model.SubscriptionParameters
import domain.usecase.ConfigUseCase
import domain.usecase.UserUseCase
import io.ktor.http.*
import io.ktor.server.application.call
import io.ktor.server.request.receiveText
import io.ktor.server.response.respond
import io.ktor.server.routing.Routing
import io.ktor.server.routing.post
import presentation.utils.PaymentUserCache

fun Routing.webhookRoutes(bot: Bot, userUseCase: UserUseCase, configUseCase: ConfigUseCase) {
    post("/webhooks") {
        PaymentUserCache.clear()
        val rawBody = call.receiveText()
        println("üì• –í—Ö–æ–¥—è—â–∏–π –≤–µ–±—Ö—É–∫: $rawBody")
        try {
            val webhookData = kotlinx.serialization.json.Json { ignoreUnknownKeys = true }
                .decodeFromString<WebhookPaymentEventDto>(rawBody)

            when (webhookData.event) {
                "payment.succeeded" -> {
                    val description = webhookData.payment.description ?: ""
                    val amountValue = webhookData.payment.amount.value
                    println("–ü–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É: $amountValue")

                    val subscriptionParameters = when (amountValue) {
                        MIN_PAYMENT_AMOUNT -> SubscriptionParameters(DATA_PERIOD_MIN, MIN_LIMIT_GB)
                        MID_PAYMENT_AMOUNT -> SubscriptionParameters(DATA_PERIOD_MID, MID_LIMIT_GB)
                        MAX_PAYMENT_AMOUNT -> SubscriptionParameters(DATA_PERIOD_MAX, MAX_LIMIT_GB)
                        else -> {
                            println("‚ö†Ô∏è –°—É–º–º–∞ $amountValue –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ—É")
                            null
                        }
                    }

                    val paymentId = webhookData.payment.id
                    val chatIdRegex = "chat_id=(\\d+)".toRegex()
                    val match = chatIdRegex.find(description)
                    val chatId = match?.groups?.get(1)?.value?.toLongOrNull()

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–π paymentId —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É
                    if (PaymentUserCache.getChatId(paymentId) != null) {
                        PaymentUserCache.clear()
                        println("üîÅ –≠—Ç–æ—Ç paymentId $paymentId —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
                        call.respond(HttpStatusCode.OK)
                        return@post
                    }

                    if (chatId != null && subscriptionParameters != null) {
                        PaymentUserCache.save(paymentId, chatId)

                        val user = userUseCase.createUser(
                            nameUser = "Rabbit_$chatId",
                            dayLimit = subscriptionParameters.dayLimit,
                            telegramId = chatId,
                            usageLimitGB = subscriptionParameters.usageLimitGB
                        )
                        println("‚úÖ –ù–æ–≤—ã–π –∫–ª—é—á (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) —Å–æ–∑–¥–∞–Ω: $user")

                        if (user.uuid == null) {
                            println("‚ö†Ô∏è uuid –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                            bot.sendMessage(
                                chatId = ChatId.fromId(chatId),
                                text = "üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ù–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–ª—é—á–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç uuid."
                            )
                        } else {
                            val config = configUseCase.tryGetConfigWithRetry(user.uuid)
                            val vpnKey = config?.full_url ?: "–æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
                            println("vpnkey: $vpnKey")
                            bot.sendMessage(
                                chatId = ChatId.fromId(chatId),
                                text = "üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n" +
                                        "–≠—Ç–æ –í–†–ï–ú–ï–ù–ù–ê–Ø –°–°–´–õ–ö–ê –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –≤ –°–¢–ê–¢–£–°–ï\n–í–∞—à VPN-–∫–ª—é—á: \n" +
                                        vpnKey
                            )
                            println("VPN-–∫–ª—é—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∫–ª—é—á —Å–æ–∑–¥–∞–Ω) —Å chat_id=$chatId")
                        }
                        // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–π paymentId –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                        PaymentUserCache.save(paymentId, chatId)

                    } else {
                        println("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ: paymentId=$paymentId, chatId=$chatId")
                    }
                }

                "payment.canceled" -> println("‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω!")
                "refund.succeeded" -> println("üîÑ –í–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                else -> println("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: ${webhookData.event}")
            }
            call.respond(HttpStatusCode.OK)
        } catch (e: Exception) {
            println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: ${e.message}")
            call.respond(HttpStatusCode.BadRequest)
        }
    }
}





