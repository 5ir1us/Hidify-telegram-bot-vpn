package presentation.comands

import com.github.kotlintelegrambot.dispatcher.Dispatcher
import com.github.kotlintelegrambot.dispatcher.callbackQuery
import com.github.kotlintelegrambot.dispatcher.command
import com.github.kotlintelegrambot.dispatcher.handlers.CallbackQueryHandlerEnvironment
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.InlineKeyboardMarkup
import com.github.kotlintelegrambot.entities.ReplyMarkup
import com.github.kotlintelegrambot.entities.keyboard.InlineKeyboardButton
import domain.usecase.UserUseCase
import kotlinx.coroutines.runBlocking
import javax.inject.Inject

class StartCommand @Inject constructor(
    private val buyCommand: BuyCommand,
    private val statusCommand: StatusCommand,
 ) {

    fun register(dispatcher: Dispatcher) {
        dispatcher.command("start") {
            val chatId = message.chat.id
            bot.sendMessage(
                chatId = ChatId.fromId(chatId),
                text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                replyMarkup = getMainMenu()
            )
        }
        dispatcher.callbackQuery("buy") { this.handleBuyCommand() }
        dispatcher.callbackQuery("status") { this.handleStatusCommand() }
        dispatcher.callbackQuery("ifo") { this.handleCancelInfo() }
        dispatcher.callbackQuery("back_to_start") { this.handleBackToStartCommand() }

    }

      fun getMainMenu(): ReplyMarkup {
        return InlineKeyboardMarkup.create(
            listOf(
                listOf(InlineKeyboardButton.CallbackData("üí≥ –ö—É–ø–∏—Ç—å VPN", "buy")),
                listOf(InlineKeyboardButton.CallbackData("üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏", "status")),
                listOf(InlineKeyboardButton.CallbackData("üß™  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "ifo")),

            )
        )
    }

    private fun CallbackQueryHandlerEnvironment.handleBuyCommand() {
        val chatId = callbackQuery.message?.chat?.id ?: return
        buyCommand.executeBuyCommand(this, chatId)
    }

    private fun CallbackQueryHandlerEnvironment.handleStatusCommand() {
        val chatId = callbackQuery.message?.chat?.id ?: return
        println("‚úÖ –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $chatId")

    }

    private fun CallbackQueryHandlerEnvironment.handleCancelInfo() {
        val chatId = callbackQuery.message?.chat?.id ?: return
        bot.sendMessage(ChatId.fromId(chatId), " ")
    }

    private fun CallbackQueryHandlerEnvironment.handleBackToStartCommand() {
        val chatId = callbackQuery.message?.chat?.id ?: return
        bot.sendMessage(
            chatId = ChatId.fromId(chatId),
            text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            replyMarkup = getMainMenu() // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
        )
    }


}